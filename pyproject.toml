[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "brownkit"
version = "0.2.1"
description = "Spec-Kit plugin for legacy code remediation - bash-based quality assessment and planning"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "BrownKit Contributors"}
]
keywords = ["spec-kit", "brownfield", "legacy", "refactoring", "technical-debt", "code-quality"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Quality Assurance",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]

dependencies = [
    "click>=8.1.0",
    "pyyaml>=6.0.1",
    "jinja2>=3.1.2",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "black>=23.12.0",
    "pylint>=3.0.0",
    "mypy>=1.8.0",
]

[project.scripts]
brownfield = "brownfield.cli:cli"

[project.urls]
Homepage = "https://github.com/brownkit/brownkit"
Documentation = "https://brownkit.readthedocs.io"
Repository = "https://github.com/brownkit/brownkit.git"
"Bug Tracker" = "https://github.com/brownkit/brownkit/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = ["E", "F", "W", "I", "N", "UP", "S", "B", "A", "C4", "DTZ", "ICN", "PIE", "PT", "RSE", "RET", "SIM", "TID", "ARG", "PLE", "PLW"]
ignore = ["S101"]  # Allow assert statements in tests

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.pylint.messages_control]
max-line-length = 100
disable = [
    "C0111",  # missing-docstring
    "R0903",  # too-few-public-methods
]

[tool.pylint.basic]
good-names = ["i", "j", "k", "ex", "e", "f", "db", "id", "_"]

[tool.coverage.run]
source = ["src/brownfield"]
omit = ["*/tests/*", "*/__pycache__/*"]

[tool.coverage.report]
precision = 2
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"


[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''
